"""
def test1():
    return 0 #return 起一个结束函数的作用 并且定义返回值
#return 当不写return的时候返回值为none
# 当定义return值得时候 返回的值为定义的那个值
#当当定义return多个值得时候 那么return的时候将会把多个值放在一个元祖里边 返回这个元祖

x = test1()
print(x)
"""
"""
#传参函数
def test(x,y): #当定义位置参数函数后 调用的时候就必须传递相应的参数 否则报错
    print(x) #位置参数 传递参数的时候 参数必须是一一对应的 不能多 不能少
    print(y) #

test(1,2) #位置调用 就是调用时传递的参数与形参一一对应的 传递的参数顺序也与形式参数的顺序一一对应
test(y=1,x=2) #关键字调用 与形参顺序无关 如果既有关键字 又有位置参数调用 它将按照位置参数的顺序调用
#关键字参数不可写到位置参数前边 混合调用时 只能先写位置参数 在写关键字参数 否则报错
"""
"""
def test(x,y=2): #默认参数
    print(x)
    print(y)
        @调用默认参数的时候 默认参数可有可无 非必须传递参数
test(1)  #当调用默认参数时 只传一个参数 那么第二个参数将使用默认参数
test(1,2) #如果传递两个参数 那么默认参数也会使用新的传递进去的参数
"""
"""
#如下边的例子 数据库连接函数 默认端口为3306 那么如果传递其他端口号 那么就变成新的值
def conn(x=3306):
    print(x)
conn()
"""
#位置参数 关键字参数 默认参数 都有一个共同的特点 传递的参数一旦超过了或者少于形式参数定义的个数 那么就会报错
"""
#参数组的定义 当传递的参数个数不是固定的时候 那么就需要用到参数组的定义了
def test(*args): #定义不固定个数实参的时候 需要写一个* 然后定义一个变量名 传递的多个参数会被放置在一个元祖里边
    print(args)

test(1,2,3)
"""
# def test(*args):
#     print(args)
#
# test(*[1,2,3]) #还可以传递一个列表进去 但是传递的列表前要加*号 那么这个列表将会被转换成元祖的形式 如果不加*号那么
# #这个整个列表将会被当做一个值放在一个元祖里

"""
#接收不固定个数关键字参数
def test(**kwargs): #使用kwargs接收传递进来的参数时 是以关键字传餐的方式接收  他会将关键字前边的值当做
    print(kwargs) #字典的key 关键字后边的值当做字典的value来处理
    print(kwargs["name"])# 返回传递进去的参数的某个key的值
    print(kwargs["age"])
    print(kwargs["sex"])
test(name="梁亚旺",age=11,sex="man")
#test(**{"name":"liangyawang","age":18}) #还可以直接将字典传递进去 同如上列表的传递方式一样
"""
"""
def test(name,**kwargs): #当参数里既有位置参数又有不固定参数定义时 不固定参数一定要放在最后边
    print(name)
    print(kwargs)

test('liangyawang',sex='mna')

#*args 接收的是一个位置参数 转换成一个元祖的形式 当不给他传参数时 返回一个空的元祖
#**kwargs 接收的是关键字参数  转换成字典的形式 当不给他传参数时 返回一个空的字典
"""
#程序的执行都是从上到下执行的 所以当此刻这个函数需要调用另一个函数时 那么被调用的那个函数必须
#在此时执行的这个函数之前就被定义或创建
